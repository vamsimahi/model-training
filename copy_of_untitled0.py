# -*- coding: utf-8 -*-
"""Copy of Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TvjqWE4jS57-KTAGHz26QUXky-g1q3wD

## load data
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
df = pd.read_csv("https://raw.githubusercontent.com/dataprofessor/data/master/BostonHousing.csv")
df

y= df["lstat"]
y

df.isnull().sum()

sns.heatmap(df.notnull())
plt.show()

df

x=df.drop("lstat",axis=1)
x

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2 , random_state=100)

x_train

y_train

x_test

y_test

from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(x_train, y_train)

y_lr_train_pred = lr.predict(x_train)
y_lr_test_pred = lr.predict(x_test)

y_lr_test_pred

y_lr_train_pred

y_train

y_lr_train_pred

from sklearn.metrics import mean_squared_error,r2_score

lr_train_mse = mean_squared_error(y_train,y_lr_train_pred)
lr_train_r2 = r2_score(y_train,y_lr_train_pred)

lr_test_mse = mean_squared_error(y_test,y_lr_test_pred)
lr_test_r2 = r2_score(y_test,y_lr_test_pred)

print("LR MSE (Train):" ,lr_train_mse)
print("LR R2 (Tets):" ,lr_train_r2)
print("LR MSE (Train):" ,lr_train_mse)
print("LR R2 (Test):" ,lr_train_r2)

lr_results = pd.DataFrame(["Linear Regression",lr_train_mse,lr_test_mse,lr_train_r2,lr_test_r2,]).transpose()
lr_results.columns=["method","training MSE","testing MSE","trainig R2","testing R2"]
lr_results

from sklearn.ensemble import RandomForestRegressor
rf = RandomForestRegressor(max_depth=2,random_state=100)
rf.fit(x_train,y_train)

y_rf_train_pred = rf.predict(x_train)
y_rf_test_pred = rf.predict(x_test)

rf_train_mse = mean_squared_error(y_train,y_rf_train_pred)
rf_train_r2 = r2_score(y_train,y_rf_train_pred)

rf_test_mse = mean_squared_error(y_test,y_rf_test_pred)
rf_test_r2 = r2_score(y_test,y_rf_test_pred)

rf_results = pd.DataFrame(["Random Forest",rf_train_mse,rf_test_mse,rf_train_r2,rf_test_r2,]).transpose()
rf_results.columns=["method","training MSE","testing MSE","trainig R2","testing R2"]
rf_results

df_models = pd.concat([lr_results,rf_results],axis=0).reset_index(drop=True)
df_models

df_models.reset_index(drop=True)

import numpy as np
plt.figure(figsize=(5,5))
plt.scatter(x=y_train,y=y_lr_train_pred,c="#7CAE00",alpha=0.3)

z = np.polyfit(y_train,y_lr_train_pred,1)
p = np.poly1d(z)

plt.ylabel("#1")
plt.xlabel("#2")
plt.plot(y_train,p(y_train), "#F8766D")